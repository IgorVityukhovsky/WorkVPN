import UIKit
import NetworkExtension
import OpenVPNAdapter

class ViewController: UIViewController {

    var vpnManager: NETunnelProviderManager!

    override func viewDidLoad() {
        super.viewDidLoad()
        setupVPNManager()
    }

    func setupVPNManager() {
        NETunnelProviderManager.loadAllFromPreferences { [weak self] (managers, error) in
            if let manager = managers?.first {
                self?.vpnManager = manager
            } else {
                self?.createVPNManager()
            }
        }
    }

    func createVPNManager() {
        vpnManager = NETunnelProviderManager()

        let tunnelProtocol = NETunnelProviderProtocol()
        tunnelProtocol.serverAddress = "YOUR_SERVER_ADDRESS"
        tunnelProtocol.providerBundleIdentifier = "YOUR_PROVIDER_BUNDLE_IDENTIFIER"
        tunnelProtocol.providerConfiguration = loadOVPNConfiguration()

        vpnManager.protocolConfiguration = tunnelProtocol
        vpnManager.localizedDescription = "Your VPN"
        vpnManager.isEnabled = true

        vpnManager.saveToPreferences { [weak self] (error) in
            if error == nil {
                self?.startVPNConnection()
            } else {
                print("Failed to save VPN configuration: \(error?.localizedDescription ?? "")")
            }
        }
    }

    func loadOVPNConfiguration() -> [String: Any] {
        guard let ovpnFilePath = Bundle.main.path(forResource: "testclient", ofType: "ovpn"),
              let ovpnContent = try? String(contentsOfFile: ovpnFilePath, encoding: .utf8) else {
            fatalError("Failed to load OVPN configuration")
        }

        return ["ovpn": ovpnContent]
    }

    func startVPNConnection() {
        vpnManager.loadFromPreferences { [weak self] (error) in
            if error == nil {
                do {
                    try self?.vpnManager.connection.startVPNTunnel()
                    print("VPN connection started")
                } catch {
                    print("Failed to start VPN connection: \(error.localizedDescription)")
                }
            } else {
                print("Failed to load VPN configuration: \(error?.localizedDescription ?? "")")
            }
        }
    }

    func stopVPNConnection() {
        vpnManager.connection.stopVPNTunnel()
        print("VPN connection stopped")
    }

    // Дополнительные методы для тестирования статуса подключения
    func isConnected() -> Bool {
        return vpnManager.connection.status == .connected
    }

    func isDisconnected() -> Bool {
        return vpnManager.connection.status == .disconnected
    }
}
