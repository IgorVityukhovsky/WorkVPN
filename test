import UIKit
import NetworkExtension

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        startVPN()
    }

    func startVPN() {
        let providerManager = NETunnelProviderManager()
        providerManager.loadFromPreferences { error in
            if error == nil {
                let tunnelProtocol = NETunnelProviderProtocol()
                tunnelProtocol.providerBundleIdentifier = "YOUR_PROVIDER_BUNDLE_IDENTIFIER"
                tunnelProtocol.serverAddress = "127.0.0.1"
                tunnelProtocol.providerConfiguration = ["ovpn": self.loadOVPNFileContent()]

                providerManager.protocolConfiguration = tunnelProtocol
                providerManager.localizedDescription = "My VPN"
                providerManager.isEnabled = true

                providerManager.saveToPreferences { error in
                    if error == nil {
                        do {
                            try providerManager.connection.startVPNTunnel()
                            // VPN connection started successfully
                        } catch {
                            // Failed to start VPN connection
                            print("Failed to start VPN: \(error)")
                        }
                    } else {
                        // Failed to save VPN configuration
                        print("Failed to save VPN configuration: \(error)")
                    }
                }
            } else {
                // Failed to load VPN preferences
                print("Failed to load VPN preferences: \(error)")
            }
        }
    }

    func loadOVPNFileContent() -> String? {
        guard let fileURL = Bundle.main.url(forResource: "testclient", withExtension: "ovpn") else {
            print("OVPN file not found")
            return nil
        }

        do {
            let fileContent = try String(contentsOf: fileURL)
            return fileContent
        } catch {
            print("Failed to read OVPN file: \(error)")
            return nil
        }
    }
}
