import Foundation
import NetworkExtension

func loadOVPNFileContent() -> String? {
    guard let fileURL = Bundle.main.url(forResource: "testclient", withExtension: "ovpn") else {
        print("OVPN file not found")
        return nil
    }

    do {
        let fileContent = try String(contentsOf: fileURL)
        return fileContent
    } catch {
        print("Error loading OVPN file: \(error)")
        return nil
    }
}

func configureVPN() {
    let vpnManager = NEVPNManager.shared()
    vpnManager.loadFromPreferences { error in
        if error == nil {
            let tunnelProtocol = NEVPNProtocolIPSec()
            tunnelProtocol.username = "Your VPN Username"
            tunnelProtocol.passwordReference = "Your VPN Password Reference"
            tunnelProtocol.serverAddress = "Your VPN Server Address"
            tunnelProtocol.authenticationMethod = .sharedSecret
            tunnelProtocol.sharedSecretReference = "Your Shared Secret Reference"
            tunnelProtocol.disconnectOnSleep = false

            let vpnSettings = NEVPNProtocolIKEv2()
            vpnSettings.username = "Your VPN Username"
            vpnSettings.serverAddress = "Your VPN Server Address"
            vpnSettings.remoteIdentifier = "Your Remote Identifier"
            vpnSettings.authenticationMethod = .none

            vpnManager.protocolConfiguration = tunnelProtocol
            vpnManager.localizedDescription = "Your VPN Description"
            vpnManager.isEnabled = true

            vpnManager.saveToPreferences { error in
                if error == nil {
                    do {
                        try vpnManager.connection.startVPNTunnel()
                        print("VPN connection started")
                    } catch {
                        print("Failed to start VPN connection: \(error)")
                    }
                } else {
                    print("Failed to save VPN configuration: \(error)")
                }
            }
        } else {
            print("Failed to load VPN preferences: \(error)")
        }
    }
}

// Load OVPN file content
guard let ovpnContent = loadOVPNFileContent() else {
    fatalError("Failed to load OVPN file")
}

// Configure and start VPN
configureVPN()

// Keep the main thread alive
RunLoop.main.run()
